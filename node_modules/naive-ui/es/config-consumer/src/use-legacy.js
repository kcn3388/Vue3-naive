import { computed, watch } from 'vue';
import styleScheme from '../../_deprecated/style-scheme';
export default function useLegacy(NConfigProvider, props) {
    if (NConfigProvider && props) {
        watch(NConfigProvider.mergedLanguageRef, (value, oldValue) => {
            const { onLanguageChange } = props;
            if (onLanguageChange)
                onLanguageChange(value, oldValue);
        });
    }
    return {
        legacyTheme: computed(() => {
            return (NConfigProvider === null || NConfigProvider === void 0 ? void 0 : NConfigProvider.mergedLegacyThemeRef.value) || 'light';
        }),
        legacyLanguage: computed(() => {
            return NConfigProvider
                ? NConfigProvider.mergedLanguageRef.value
                : undefined;
        }),
        legacyThemeEnvironment: computed(() => {
            var _a, _b;
            return ((_b = (_a = NConfigProvider === null || NConfigProvider === void 0 ? void 0 : NConfigProvider.mergedThemeEnvironmentsRef.value) === null || _a === void 0 ? void 0 : _a[NConfigProvider.mergedLegacyThemeRef.value || 'light']) !== null && _b !== void 0 ? _b : null);
        }),
        legacyStyleScheme: computed(() => {
            return styleScheme[(NConfigProvider === null || NConfigProvider === void 0 ? void 0 : NConfigProvider.mergedLegacyThemeRef.value) || 'light'];
        })
    };
}
