import { ExtractPropTypes, PropType, InjectionKey, Ref } from 'vue';
import type { ExtractPublicPropTypes } from '../../_utils';
import { exposedDialogEnvProps } from './DialogEnvironment';
export declare type DialogOptions = Partial<ExtractPropTypes<typeof exposedDialogEnvProps>>;
export declare type DialogReactive = {
    readonly key: string;
    readonly destroy: () => void;
} & DialogOptions;
export interface DialogApiInjection {
    create: (options: DialogOptions) => DialogReactive;
    success: (options: DialogOptions) => DialogReactive;
    warning: (options: DialogOptions) => DialogReactive;
    error: (options: DialogOptions) => DialogReactive;
    info: (options: DialogOptions) => DialogReactive;
}
export declare const dialogApiInjectionKey: InjectionKey<DialogApiInjection>;
export interface DialogProviderInjection {
    clickedRef: Ref<boolean>;
    clickPositionRef: Ref<{
        x: number;
        y: number;
    } | null>;
}
export declare const dialogProviderInjectionKey: InjectionKey<DialogProviderInjection>;
interface DialogInst {
    hide: () => void;
}
export declare type DialogProviderInst = DialogApiInjection;
declare const dialogProviderProps: {
    injectionKey: StringConstructor;
    to: PropType<string | HTMLElement>;
};
export declare type DialogProviderProps = ExtractPublicPropTypes<typeof dialogProviderProps>;
declare const _default: import("vue").DefineComponent<{
    injectionKey: StringConstructor;
    to: PropType<string | HTMLElement>;
}, {
    dialogList: Ref<{
        readonly key: string;
        readonly destroy: () => void;
        type?: "default" | "error" | "info" | "success" | "warning" | undefined;
        bordered?: boolean | undefined;
        loading?: boolean | undefined;
        closable?: boolean | undefined;
        showIcon?: boolean | undefined;
        content?: string | (() => import("vue").VNodeChild) | undefined;
        icon?: (() => import("vue").VNodeChild) | undefined;
        title?: string | undefined;
        onClose?: (() => unknown) | undefined;
        iconPlacement?: import("./interface").IconPlacement | undefined;
        negativeText?: string | undefined;
        positiveText?: string | undefined;
        onPositiveClick?: ((e: MouseEvent) => unknown) | undefined;
        onNegativeClick?: ((e: MouseEvent) => unknown) | undefined;
    }[]>;
    dialogInstRefs: Record<string, DialogInst>;
    handleAfterLeave: (key: String) => void;
    create: (options?: DialogOptions) => DialogReactive;
    info: (options: DialogOptions) => DialogReactive;
    success: (options: DialogOptions) => DialogReactive;
    warning: (options: DialogOptions) => DialogReactive;
    error: (options: DialogOptions) => DialogReactive;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    to?: string | HTMLElement | undefined;
    injectionKey?: string | undefined;
}>, {}>;
export default _default;
