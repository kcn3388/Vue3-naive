import { TreeNode } from 'treemate';
import { CSSProperties, InjectionKey, Ref, VNodeChild, HTMLAttributes } from 'vue';
import { EllipsisProps } from '../../ellipsis/src/Ellipsis';
import { NLocale } from '../../locales';
import { MergedTheme } from '../../_mixins';
import { DataTableTheme } from '../styles';
import { RowItem, ColItem } from './use-group-header';
import { DataTableSelectionOption } from './TableParts/SelectionMenu';
export declare type FilterOptionValue = string | number;
export declare type ColumnKey = string | number;
export declare type RowKey = string | number;
export declare type SortOrderFlag = 1 | -1 | 0;
export declare type CreateRowKey = (row: RowData) => RowKey;
export declare type CreateRowClassName = (row: RowData, index: number) => string;
export declare type CreateRowProps = (row: RowData, index: number) => HTMLAttributes;
export declare type Sorter = (row1: RowData, row2: RowData) => number;
export declare type Filter = (filterOptionValue: FilterOptionValue, row: RowData) => boolean;
export interface FilterOption {
    label: string;
    value: FilterOptionValue;
}
export interface RowData {
    [key: string]: unknown;
}
export declare type TmNode = TreeNode<RowData>;
export declare type SortOrder = 'ascend' | 'descend' | false;
export declare type Ellipsis = boolean | EllipsisProps;
export interface CommonColumnInfo {
    fixed?: 'left' | 'right';
    width?: number;
    className?: string;
    align?: 'left' | 'center' | 'right';
    ellipsis?: Ellipsis;
}
export declare type TableColumnTitle = string | ((column: TableBaseColumn) => VNodeChild);
export declare type TableExpandColumnTitle = string | ((column: TableExpandColumn) => VNodeChild);
export declare type TableColumnGroupTitle = string | ((column: TableColumnGroup) => VNodeChild);
export declare type TableColumnGroup = {
    title?: TableColumnGroupTitle;
    type?: never;
    key: ColumnKey;
    children: TableBaseColumn[];
    filterOptions?: never;
} & CommonColumnInfo;
export declare type TableBaseColumn = {
    title?: TableColumnTitle;
    titleColSpan?: number;
    type?: never;
    key: ColumnKey;
    sorter?: boolean | Sorter | 'default';
    defaultSortOrder?: SortOrder;
    sortOrder?: SortOrder;
    filter?: 'default' | boolean | Filter;
    filterOptions?: FilterOption[];
    filterOptionValues?: FilterOptionValue[] | null;
    filterOptionValue?: FilterOptionValue | null;
    filterMode?: 'or' | 'and';
    defaultFilterOptionValues?: FilterOptionValue[] | null;
    defaultFilterOptionValue?: FilterOptionValue | null;
    filterMultiple?: boolean;
    render?: (rowData: RowData, rowIndex: number) => VNodeChild;
    renderSorter?: RenderSorter;
    renderFilter?: RenderFilter;
    renderFilterIcon?: RenderFilter;
    renderFilterMenu?: RenderFilterMenu;
    colSpan?: (rowData: RowData, rowIndex: number) => number;
    rowSpan?: (rowData: RowData, rowIndex: number) => number;
} & CommonColumnInfo;
export declare type TableSelectionColumn = {
    type: 'selection';
    disabled?: (row: RowData) => boolean;
    options?: DataTableSelectionOptions;
    sorter?: never;
    filter?: never;
    filterOptions?: never;
    filterOptionValues?: never;
    filterOptionValue?: never;
    colSpan?: never;
    rowSpan?: never;
} & CommonColumnInfo;
export declare type RenderExpand = (row: RowData, index: number) => VNodeChild;
export declare type Expandable = (row: RowData, index: number) => boolean;
export interface TableExpandColumn extends Omit<TableSelectionColumn, 'type'> {
    type: 'expand';
    title?: TableExpandColumnTitle;
    renderExpand: RenderExpand;
    expandable?: Expandable;
}
export declare type TableColumn = TableColumnGroup | TableBaseColumn | TableSelectionColumn | TableExpandColumn;
export declare type TableColumns = TableColumn[];
export declare type DataTableSelectionOptions = Array<DataTableSelectionOption | {
    label: string;
    key: string | number;
    onSelect: () => void;
}>;
export interface DataTableInjection {
    indentRef: Ref<number>;
    hasChildrenRef: Ref<boolean>;
    firstContentfulColIndexRef: Ref<number>;
    componentId: string;
    checkOptionsRef: Ref<DataTableSelectionOptions | undefined>;
    hoverKeyRef: Ref<RowKey | null>;
    mergedClsPrefixRef: Ref<string>;
    mergedThemeRef: Ref<MergedTheme<DataTableTheme>>;
    scrollXRef: Ref<string | number | undefined>;
    rowsRef: Ref<RowItem[][]>;
    colsRef: Ref<ColItem[]>;
    paginatedDataRef: Ref<TmNode[]>;
    leftFixedColumnsRef: Ref<TableColumns>;
    rightFixedColumnsRef: Ref<TableColumns>;
    leftActiveFixedColKeyRef: Ref<ColumnKey | null>;
    rightActiveFixedColKeyRef: Ref<ColumnKey | null>;
    fixedColumnLeftMapRef: Ref<Record<ColumnKey, number | undefined>>;
    fixedColumnRightMapRef: Ref<Record<ColumnKey, number | undefined>>;
    mergedCurrentPageRef: Ref<number>;
    someRowsCheckedRef: Ref<boolean>;
    allRowsCheckedRef: Ref<boolean>;
    mergedSortStateRef: Ref<SortState | null>;
    mergedFilterStateRef: Ref<FilterState>;
    loadingRef: Ref<boolean>;
    rowClassNameRef: Ref<string | CreateRowClassName | undefined>;
    mergedCheckedRowKeySetRef: Ref<Set<RowKey>>;
    mergedInderminateRowKeySetRef: Ref<Set<RowKey>>;
    localeRef: Ref<NLocale['DataTable']>;
    filterMenuCssVarsRef: Ref<CSSProperties>;
    mergedExpandedRowKeysRef: Ref<RowKey[]>;
    rowKeyRef: Ref<CreateRowKey | undefined>;
    renderExpandRef: Ref<undefined | RenderExpand>;
    summaryRef: Ref<undefined | CreateSummary>;
    rawPaginatedDataRef: Ref<RowData[]>;
    virtualScrollRef: Ref<boolean>;
    bodyWidthRef: Ref<number | null>;
    scrollPartRef: Ref<'head' | 'body'>;
    tableLayoutRef: Ref<'auto' | 'fixed'>;
    maxHeightRef: Ref<string | number | undefined>;
    minHeightRef: Ref<string | number | undefined>;
    rowPropsRef: Ref<CreateRowProps | undefined>;
    doUpdateExpandedRowKeys: (keys: RowKey[]) => void;
    doUpdateFilters: (filters: FilterState, sourceColumn?: TableBaseColumn) => void;
    doUpdateSorter: (sorter: SortState | null) => void;
    doUncheckAll: (checkWholeTable?: boolean) => void;
    doCheckAll: (checkWholeTable?: boolean) => void;
    doCheck: (rowKey: RowKey) => void;
    doUncheck: (rowKey: RowKey) => void;
    handleTableHeaderScroll: (e: Event) => void;
    handleTableBodyScroll: (e: Event) => void;
    syncScrollState: (deltaX?: number, deltaY?: number) => void;
    setHeaderScrollLeft: (scrollLeft: number) => void;
}
export declare const dataTableInjectionKey: InjectionKey<DataTableInjection>;
export interface MainTableInjection {
    leftActiveFixedColKey: ColumnKey | null;
    rightActiveFixedColKey: ColumnKey | null;
}
export declare type RenderFilter = (props: {
    active: boolean;
    show: boolean;
}) => VNodeChild;
export declare type RenderSorter = (props: {
    order: SortOrder | false;
}) => VNodeChild;
export declare type RenderFilterMenu = () => VNodeChild;
export declare type OnUpdateExpandedRowKeys = (keys: RowKey[]) => void;
export declare type OnUpdateCheckedRowKeys = (keys: RowKey[]) => void;
export declare type OnUpdateSorter = (sortState: SortState | null) => void;
export declare type OnUpdateFilters = (filterState: FilterState, sourceColumn?: TableBaseColumn) => void;
export interface SortState {
    columnKey: ColumnKey;
    order: SortOrder;
    sorter: Sorter | boolean | 'default';
}
export interface FilterState {
    [key: string]: FilterOptionValue[] | FilterOptionValue | null | undefined;
}
export interface MainTableRef {
    getHeaderElement: () => HTMLElement | null;
    getBodyElement: () => HTMLElement | null;
}
export interface MainTableBodyRef {
    getScrollContainer: () => HTMLElement | null;
}
export interface MainTableHeaderRef {
    $el: HTMLElement | null;
}
export declare type OnFilterMenuChange = <T extends FilterOptionValue[] & (FilterOptionValue | null)>(value: T) => void;
export declare type OnFilterMenuChangeImpl = (value: FilterOptionValue[] | FilterOptionValue | null) => void;
export interface DataTableInst {
    filter: (filters: FilterState | null) => void;
    filters: (filters: FilterState | null) => void;
    clearFilter: () => void;
    clearFilters: () => void;
    page: (page: number) => void;
    sort: (columnKey: ColumnKey, order: SortOrder) => void;
}
export declare type CreateSummary = (pageData: RowData[]) => SummaryRowData | SummaryRowData[];
export interface SummaryCell {
    value?: string | number;
    colSpan?: number;
    rowSpan?: number;
}
export interface SummaryRowData {
    [key: string]: SummaryCell;
}
