import { PropType, CSSProperties } from 'vue';
import type { MenuOption } from '../../../menu';
import type { LayoutProps } from '../../../layout/src/Layout';
import type { LayoutSiderProps } from '../../../layout/src/LayoutSider';
import type { LayoutHeaderProps } from '../../../layout/src/LayoutHeader';
import type { Item } from './interface';
declare const _default: import("vue").DefineComponent<{
    items: {
        type: PropType<Item[]>;
        default: () => never[];
    };
    name: StringConstructor;
    headerProps: PropType<LayoutHeaderProps & {
        style: CSSProperties;
    }>;
    contentProps: PropType<LayoutProps & {
        style: CSSProperties;
    }>;
    siderProps: PropType<LayoutSiderProps & {
        style: CSSProperties;
    }>;
    value: StringConstructor;
    'onUpdate:value': PropType<(value: string) => void>;
    paddingBody: {
        type: BooleanConstructor;
        default: boolean;
    };
    onInput: PropType<(value: string) => void>;
    onSelect: PropType<(value: string) => void>;
    onExpandedNamesChange: PropType<(value: string[]) => void>;
}, {
    bodyLayoutInstRef: import("vue").Ref<{
        scrollTo: ((options: ScrollToOptions) => void) & ((x: number, y: number) => void);
    } | null>;
    scrollTo: ((options: ScrollToOptions) => void) & ((x: number, y: number) => void);
    handleMenuUpdateValue: (value: string, item: MenuOption) => void;
    menuItems: import("vue").ComputedRef<MenuOption[]>;
    mergedValue: import("vue").ComputedRef<string | null>;
    uncontrolledValue: import("vue").Ref<string | null>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    items: Item[];
    paddingBody: boolean;
} & {
    value?: string | undefined;
    name?: string | undefined;
    onInput?: ((value: string) => void) | undefined;
    onSelect?: ((value: string) => void) | undefined;
    "onUpdate:value"?: ((value: string) => void) | undefined;
    onExpandedNamesChange?: ((value: string[]) => void) | undefined;
    headerProps?: (LayoutHeaderProps & {
        style: CSSProperties;
    }) | undefined;
    contentProps?: (LayoutProps & {
        style: CSSProperties;
    }) | undefined;
    siderProps?: (LayoutSiderProps & {
        style: CSSProperties;
    }) | undefined;
}>, {
    items: Item[];
    paddingBody: boolean;
}>;
export default _default;
