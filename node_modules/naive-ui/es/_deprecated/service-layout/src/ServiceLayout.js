import { h, ref, toRef, defineComponent, watch, computed } from 'vue';
import { useMergedState } from 'vooks';
import { useRoute, useRouter } from 'vue-router';
import SiderHeader from './SiderHeader';
import { NMenu } from '../../../menu';
import NLayout from '../../../layout/src/Layout';
import NLayoutSider from '../../../layout/src/LayoutSider';
import NLayoutHeader from '../../../layout/src/LayoutHeader';
import { createItems } from './utils';
export default defineComponent({
    name: 'ServiceLayout',
    alias: ['NimbusServiceLayout'],
    props: {
        items: {
            type: Array,
            default: () => []
        },
        name: String,
        headerProps: Object,
        contentProps: Object,
        siderProps: Object,
        value: String,
        'onUpdate:value': Function,
        // deprecated
        paddingBody: {
            type: Boolean,
            default: false
        },
        onInput: Function,
        onSelect: Function,
        onExpandedNamesChange: Function
    },
    setup(props) {
        const router = useRouter();
        const route = useRoute();
        const bodyLayoutInstRef = ref(null);
        const uncontrolledValueRef = ref(null);
        const controlledValueRef = toRef(props, 'value');
        const mergedValueRef = useMergedState(controlledValueRef, uncontrolledValueRef);
        const menuItemsRef = computed(() => {
            return createItems(props.items);
        });
        if (route) {
            syncPath(route.path);
            watch(toRef(route, 'path'), (path) => {
                syncPath(path);
            });
            watch(toRef(props, 'items'), () => {
                syncPath(route.path);
            });
        }
        function doUpdateValue(value) {
            const { onInput, onSelect, 'onUpdate:value': onUpdateValue } = props;
            uncontrolledValueRef.value = value;
            if (onSelect)
                onSelect(value);
            if (onInput)
                onInput(value);
            if (onUpdateValue)
                onUpdateValue(value);
        }
        function handleMenuUpdateValue(value, item) {
            if (router && item.path) {
                // path is copied to menu item in utils.createItems
                Promise.resolve(router.push(item.path)).catch((err) => {
                    console.log(err);
                });
            }
            doUpdateValue(value);
        }
        const scrollTo = (...args) => {
            var _a;
            ;
            ((_a = bodyLayoutInstRef.value) === null || _a === void 0 ? void 0 : _a.scrollTo)(...args);
        };
        function syncPath(path, items) {
            if (items === undefined)
                items = props.items;
            for (const item of items) {
                if (item.childItems || item.children) {
                    syncPath(path, item.childItems || item.children);
                }
                else if (item.path === path) {
                    doUpdateValue(item.name || item.key || '');
                    return;
                }
            }
        }
        return {
            bodyLayoutInstRef,
            scrollTo,
            handleMenuUpdateValue,
            menuItems: menuItemsRef,
            mergedValue: mergedValueRef,
            uncontrolledValue: uncontrolledValueRef
        };
    },
    render() {
        var _a, _b;
        const siderProps = Object.assign(Object.assign({ bordered: true }, this.siderProps), { showTrigger: true, collapseMode: 'width', showCollapsedContent: true, nativeScrollbar: false, collapsedWidth: 0, width: 288, triggerStyle: {
                top: 'calc(50% - 78px)'
            }, scrollbarProps: {
                style: {
                    width: '288px',
                    flexShrink: 0
                }
            }, style: (_a = this.siderProps) === null || _a === void 0 ? void 0 : _a.style });
        const contentProps = Object.assign(Object.assign({}, this.contentProps), { ref: 'bodyLayoutInstRef', nativeScrollbar: false, scrollbarProps: {
                // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
                contentStyle: {
                    width: '100%',
                    boxSizing: 'border-box',
                    padding: this.paddingBody ? '21px 48px' : ''
                }
            } });
        const headerProps = Object.assign(Object.assign({}, this.headerProps), { style: Object.assign(Object.assign({}, (_b = this.headerProps) === null || _b === void 0 ? void 0 : _b.style), { height: '64px' }), bordered: true });
        const navSlot = this.$slots.nav;
        return h(NLayout, {
            position: 'absolute'
        }, {
            default: () => [
                navSlot ? h(NLayoutHeader, headerProps, navSlot()) : null,
                h(NLayout, {
                    hasSider: true,
                    style: {
                        top: navSlot ? '64px' : undefined
                    },
                    position: 'absolute'
                }, {
                    default: () => [
                        h(NLayoutSider, siderProps, {
                            default: () => [
                                h(SiderHeader, {
                                    name: this.name
                                }, {
                                    icon: this.$slots['drawer-header-icon']
                                }),
                                h(NMenu, {
                                    value: this.mergedValue,
                                    defaultExpandAll: true,
                                    rootIndent: 36,
                                    indent: 40,
                                    options: this.menuItems,
                                    'onUpdate:expandedKeys': this.onExpandedNamesChange,
                                    'onUpdate:value': this.handleMenuUpdateValue
                                })
                            ]
                        }),
                        h(NLayout, contentProps, {
                            default: this.$slots.default
                        })
                    ]
                })
            ]
        });
    }
});
