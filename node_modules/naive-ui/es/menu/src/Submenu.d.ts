import { PropType, VNodeChild, InjectionKey } from 'vue';
import type { SubmenuInjection } from './use-menu-child';
import { TreeNode } from 'treemate';
import { MenuGroupOption, MenuOption } from './interface';
export declare const submenuProps: {
    readonly rawNodes: {
        readonly type: PropType<(MenuOption | MenuGroupOption)[]>;
        readonly default: () => never[];
    };
    readonly tmNodes: {
        readonly type: PropType<TreeNode<MenuOption, MenuGroupOption, MenuOption>[]>;
        readonly default: () => never[];
    };
    readonly disabled: {
        readonly type: BooleanConstructor;
        readonly default: false;
    };
    readonly icon: PropType<() => VNodeChild>;
    readonly onClick: PropType<() => void>;
    readonly internalKey: {
        readonly type: PropType<import("treemate").Key>;
        readonly required: true;
    };
    readonly root: BooleanConstructor;
    readonly isGroup: BooleanConstructor;
    readonly level: {
        readonly type: NumberConstructor;
        readonly required: true;
    };
    readonly title: PropType<string | Function>;
    readonly extra: PropType<string | Function>;
};
export declare const submenuInjectionKey: InjectionKey<SubmenuInjection>;
declare const _default: import("vue").DefineComponent<{
    readonly rawNodes: {
        readonly type: PropType<(MenuOption | MenuGroupOption)[]>;
        readonly default: () => never[];
    };
    readonly tmNodes: {
        readonly type: PropType<TreeNode<MenuOption, MenuGroupOption, MenuOption>[]>;
        readonly default: () => never[];
    };
    readonly disabled: {
        readonly type: BooleanConstructor;
        readonly default: false;
    };
    readonly icon: PropType<() => VNodeChild>;
    readonly onClick: PropType<() => void>;
    readonly internalKey: {
        readonly type: PropType<import("treemate").Key>;
        readonly required: true;
    };
    readonly root: BooleanConstructor;
    readonly isGroup: BooleanConstructor;
    readonly level: {
        readonly type: NumberConstructor;
        readonly required: true;
    };
    readonly title: PropType<string | Function>;
    readonly extra: PropType<string | Function>;
}, {
    doSelect: import("./interface").OnUpdateValueImpl;
    inverted: import("vue").Ref<boolean>;
    isHorizontal: import("vue").Ref<boolean>;
    mergedClsPrefix: import("vue").Ref<string>;
    maxIconSize: import("vue").ComputedRef<number>;
    activeIconSize: import("vue").ComputedRef<number>;
    iconMarginRight: import("vue").ComputedRef<number>;
    dropdownPlacement: import("vue").ComputedRef<"right" | "bottom" | "right-start">;
    dropdownShow: import("vue").Ref<boolean>;
    paddingLeft: import("vue").ComputedRef<number | undefined>;
    mergedDisabled: import("vue").ComputedRef<boolean>;
    mergedValue: import("vue").Ref<import("treemate").Key | null>;
    childActive: import("vue").ComputedRef<boolean>;
    collapsed: import("vue").ComputedRef<boolean>;
    dropdownEnabled: import("vue").ComputedRef<boolean>;
    handlePopoverShowChange: (value: boolean) => void;
    handleClick: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    disabled: boolean;
    level: number;
    isGroup: boolean;
    tmNodes: TreeNode<MenuOption, MenuGroupOption, MenuOption>[];
    internalKey: import("treemate").Key;
    rawNodes: (MenuOption | MenuGroupOption)[];
    root: boolean;
} & {
    extra?: string | Function | undefined;
    icon?: (() => VNodeChild) | undefined;
    onClick?: (() => void) | undefined;
    title?: string | Function | undefined;
}>, {
    disabled: boolean;
    isGroup: boolean;
    tmNodes: TreeNode<MenuOption, MenuGroupOption, MenuOption>[];
    rawNodes: (MenuOption | MenuGroupOption)[];
    root: boolean;
}>;
export default _default;
