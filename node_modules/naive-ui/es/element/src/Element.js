import { computed, h, defineComponent } from 'vue';
import { kebabCase } from 'lodash-es';
import { useConfig, useTheme } from '../../_mixins';
import { warn } from '../../_utils';
/**
 * @deprecated
 */
import useLegacy from '../../config-consumer/src/use-legacy';
import { elementLight } from '../styles';
const elementProps = Object.assign(Object.assign({}, useTheme.props), { tag: {
        type: String,
        default: 'div'
    }, 
    // deprecated
    onThemeChange: {
        type: Function,
        validator: () => {
            warn('element', '`on-theme-change` is deprecated.');
            return true;
        },
        default: undefined
    }, as: {
        type: String,
        validator: () => {
            warn('element', '`as` is deprecated, please use `tag` instead.');
            return true;
        },
        default: undefined
    } });
export default defineComponent({
    name: 'Element',
    alias: ['El'],
    props: elementProps,
    setup(props) {
        const { NConfigProvider, namespaceRef, mergedClsPrefixRef } = useConfig(props);
        const themeRef = useTheme('Element', 'Element', undefined, elementLight, props, mergedClsPrefixRef);
        return Object.assign(Object.assign({}, useLegacy(NConfigProvider)), { mergedClsPrefix: mergedClsPrefixRef, namespace: namespaceRef, cssVars: computed(() => {
                const { common } = themeRef.value;
                return Object.keys(common).reduce((prevValue, key) => {
                    prevValue[`--${kebabCase(key)}`] = common[key];
                    return prevValue;
                }, {});
            }) });
    },
    render() {
        var _a;
        const { as, tag, mergedClsPrefix, namespace, $slots, cssVars, 
        // deprecated
        legacyTheme, legacyThemeEnvironment, legacyStyleScheme } = this;
        return h(as || tag, {
            class: [
                `${mergedClsPrefix}-element`,
                legacyTheme && `${mergedClsPrefix}-${legacyTheme}-theme`
            ],
            style: cssVars
        }, (((_a = $slots.default) === null || _a === void 0 ? void 0 : _a.call($slots, {
            namespace: namespace,
            theme: legacyTheme,
            themeEnvironment: legacyThemeEnvironment,
            styleScheme: legacyStyleScheme
        })) || null));
    }
});
