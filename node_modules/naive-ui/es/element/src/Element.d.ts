import { PropType } from 'vue';
import type { ExtractPublicPropTypes } from '../../_utils';
declare const elementProps: {
    readonly tag: {
        readonly type: StringConstructor;
        readonly default: "div";
    };
    readonly onThemeChange: {
        readonly type: PropType<(theme: string | undefined) => void>;
        readonly validator: () => boolean;
        readonly default: undefined;
    };
    readonly as: {
        readonly type: StringConstructor;
        readonly validator: () => boolean;
        readonly default: undefined;
    };
    readonly theme: PropType<import("../../_mixins").Theme<"Element", {}, any>>;
    readonly themeOverrides: PropType<import("../../_mixins/use-theme").ExtractThemeOverrides<import("../../_mixins").Theme<"Element", {}, any>>>;
    readonly builtinThemeOverrides: PropType<import("../../_mixins/use-theme").ExtractThemeOverrides<import("../../_mixins").Theme<"Element", {}, any>>>;
};
export declare type ElementProps = ExtractPublicPropTypes<typeof elementProps>;
declare const _default: import("vue").DefineComponent<{
    readonly tag: {
        readonly type: StringConstructor;
        readonly default: "div";
    };
    readonly onThemeChange: {
        readonly type: PropType<(theme: string | undefined) => void>;
        readonly validator: () => boolean;
        readonly default: undefined;
    };
    readonly as: {
        readonly type: StringConstructor;
        readonly validator: () => boolean;
        readonly default: undefined;
    };
    readonly theme: PropType<import("../../_mixins").Theme<"Element", {}, any>>;
    readonly themeOverrides: PropType<import("../../_mixins/use-theme").ExtractThemeOverrides<import("../../_mixins").Theme<"Element", {}, any>>>;
    readonly builtinThemeOverrides: PropType<import("../../_mixins/use-theme").ExtractThemeOverrides<import("../../_mixins").Theme<"Element", {}, any>>>;
}, {
    mergedClsPrefix: import("vue").ComputedRef<string>;
    namespace: import("vue").ComputedRef<string | undefined>;
    cssVars: import("vue").ComputedRef<Record<string, string | number>>;
    legacyTheme: import("vue").ComputedRef<string | undefined>;
    legacyLanguage: import("vue").ComputedRef<string | undefined>;
    legacyThemeEnvironment: import("vue").ComputedRef<any>;
    legacyStyleScheme: import("vue").ComputedRef<any>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    tag: string;
    as: string;
    onThemeChange: (theme: string | undefined) => void;
} & {
    theme?: import("../../_mixins").Theme<"Element", {}, any> | undefined;
    themeOverrides?: import("../../_mixins/use-theme").ExtractThemeOverrides<import("../../_mixins").Theme<"Element", {}, any>> | undefined;
    builtinThemeOverrides?: import("../../_mixins/use-theme").ExtractThemeOverrides<import("../../_mixins").Theme<"Element", {}, any>> | undefined;
}>, {
    tag: string;
    as: string;
    onThemeChange: (theme: string | undefined) => void;
}>;
export default _default;
