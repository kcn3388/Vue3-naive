"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable @typescript-eslint/no-non-null-assertion */
const vue_1 = require("vue");
const treemate_1 = require("treemate");
const vooks_1 = require("vooks");
const vueuc_1 = require("vueuc");
const _mixins_1 = require("../../_mixins");
const _utils_1 = require("../../_utils");
const scrollbar_1 = require("../../scrollbar");
const styles_1 = require("../styles");
const TreeNode_1 = require("./TreeNode");
const utils_1 = require("./utils");
const index_cssr_1 = require("./styles/index.cssr");
const interface_1 = require("./interface");
const MotionWrapper_1 = require("./MotionWrapper");
const dnd_1 = require("./dnd");
// TODO:
// During expanding, some node are mis-applied with :active style
// Async dnd has bug
const ITEM_SIZE = 30;
const treeProps = Object.assign(Object.assign({}, _mixins_1.useTheme.props), { data: {
        type: Array,
        default: () => []
    }, defaultExpandAll: Boolean, expandOnDragenter: {
        type: Boolean,
        default: true
    }, cancelable: {
        type: Boolean,
        default: true
    }, checkable: Boolean, draggable: Boolean, blockNode: Boolean, blockLine: Boolean, disabled: Boolean, checkedKeys: Array, defaultCheckedKeys: {
        type: Array,
        default: () => []
    }, expandedKeys: Array, defaultExpandedKeys: {
        type: Array,
        default: () => []
    }, selectedKeys: Array, defaultSelectedKeys: {
        type: Array,
        default: () => []
    }, remote: {
        type: Boolean,
        default: false
    }, multiple: {
        type: Boolean,
        default: false
    }, pattern: {
        type: String,
        default: ''
    }, filter: {
        type: Function,
        default: (pattern, node) => {
            if (!pattern)
                return true;
            return ~node.label.toLowerCase().indexOf(pattern.toLowerCase());
        }
    }, onLoad: Function, cascade: {
        type: Boolean,
        default: false
    }, selectable: {
        type: Boolean,
        default: true
    }, indent: {
        type: Number,
        default: 16
    }, allowDrop: {
        type: Function,
        default: dnd_1.defaultAllowDrop
    }, virtualScroll: Boolean, onDragenter: [Function, Array], onDragleave: [Function, Array], onDragend: [Function, Array], onDragstart: [Function, Array], onDragover: [Function, Array], onDrop: [Function, Array], 
    // eslint-disable-next-line vue/prop-name-casing
    'onUpdate:expandedKeys': [Function, Array], 
    // eslint-disable-next-line vue/prop-name-casing
    'onUpdate:checkedKeys': [Function, Array], 
    // eslint-disable-next-line vue/prop-name-casing
    'onUpdate:selectedKeys': [Function, Array], 
    // deprecated
    /** @deprecated */
    onExpandedKeysChange: {
        type: [Function, Array],
        validator: () => {
            _utils_1.warn('tree', '`on-expanded-keys-change` is deprecated, please use `on-update:expanded-keys` instead.');
            return true;
        },
        default: undefined
    }, 
    /** @deprecated */
    onCheckedKeysChange: {
        type: [Function, Array],
        validator: () => {
            _utils_1.warn('tree', '`on-checked-keys-change` is deprecated, please use `on-update:expanded-keys` instead.');
            return true;
        },
        default: undefined
    }, 
    /** @deprecated */
    onSelectedKeysChange: {
        type: [Function, Array],
        validator: () => {
            _utils_1.warn('tree', '`on-selected-keys-change` is deprecated, please use `on-update:selected-keys` instead.');
            return true;
        },
        default: undefined
    } });
exports.default = vue_1.defineComponent({
    name: 'Tree',
    props: treeProps,
    setup(props) {
        const { mergedClsPrefixRef } = _mixins_1.useConfig(props);
        const themeRef = _mixins_1.useTheme('Tree', 'Tree', index_cssr_1.default, styles_1.treeLight, props, mergedClsPrefixRef);
        const selfElRef = vue_1.ref(null);
        const scrollbarInstRef = vue_1.ref(null);
        const virtualListInstRef = vue_1.ref(null);
        function getScrollContainer() {
            var _a;
            return (_a = virtualListInstRef.value) === null || _a === void 0 ? void 0 : _a.listElRef;
        }
        function getScrollContent() {
            var _a;
            return (_a = virtualListInstRef.value) === null || _a === void 0 ? void 0 : _a.itemsElRef;
        }
        const treeMateRef = vue_1.computed(() => treemate_1.createTreeMate(props.data));
        const uncontrolledCheckedKeysRef = vue_1.ref(props.defaultCheckedKeys || props.checkedKeys);
        const controlledCheckedKeysRef = vue_1.toRef(props, 'checkedKeys');
        const mergedCheckedKeysRef = vooks_1.useMergedState(controlledCheckedKeysRef, uncontrolledCheckedKeysRef);
        const checkedStatusRef = vue_1.computed(() => {
            return treeMateRef.value.getCheckedKeys(mergedCheckedKeysRef.value, {
                cascade: props.cascade
            });
        });
        const displayedCheckedKeysRef = vue_1.computed(() => {
            return checkedStatusRef.value.checkedKeys;
        });
        const displayedIndeterminateKeysRef = vue_1.computed(() => {
            return checkedStatusRef.value.indeterminateKeys;
        });
        const uncontrolledSelectedKeysRef = vue_1.ref(props.defaultSelectedKeys || props.selectedKeys);
        const controlledSelectedKeysRef = vue_1.toRef(props, 'selectedKeys');
        const mergedSelectedKeysRef = vooks_1.useMergedState(controlledSelectedKeysRef, uncontrolledSelectedKeysRef);
        const uncontrolledExpandedKeysRef = vue_1.ref(props.defaultExpandAll
            ? treeMateRef.value.getNonLeafKeys()
            : props.defaultExpandedKeys || props.expandedKeys);
        const controlledExpandedKeysRef = vue_1.toRef(props, 'expandedKeys');
        const mergedExpandedKeysRef = vooks_1.useMergedState(controlledExpandedKeysRef, uncontrolledExpandedKeysRef);
        const fNodesRef = vue_1.computed(() => treeMateRef.value.getFlattenedNodes(mergedExpandedKeysRef.value));
        let expandTimerId = null;
        let nodeKeyToBeExpanded = null;
        const highlightKeysRef = vue_1.ref([]);
        const loadingKeysRef = vue_1.ref([]);
        let dragStartX = 0;
        const draggingNodeRef = vue_1.ref(null);
        const droppingNodeRef = vue_1.ref(null);
        const droppingMouseNodeRef = vue_1.ref(null);
        const droppingPositionRef = vue_1.ref(null);
        const droppingOffsetLevelRef = vue_1.ref(0);
        const droppingNodeParentRef = vue_1.computed(() => {
            const { value: droppingNode } = droppingNodeRef;
            if (!droppingNode)
                return null;
            // May avoid overlap between line mark of first child & rect mark of parent
            // if (droppingNode.isFirstChild && droppingPositionRef.value === 'before') {
            //   return null
            // }
            return droppingNode.parent;
        });
        // shallow watch data
        vue_1.watch(vue_1.toRef(props, 'data'), () => {
            loadingKeysRef.value = [];
            resetDndState();
        }, {
            deep: false
        });
        vue_1.watch(vue_1.toRef(props, 'pattern'), (value) => {
            if (value) {
                const [expandedKeysAfterChange, highlightKeys] = utils_1.keysWithFilter(props.data, props.pattern, props.filter);
                highlightKeysRef.value = highlightKeys;
                doExpandedKeysChange(expandedKeysAfterChange);
            }
            else {
                highlightKeysRef.value = [];
            }
        });
        const aipRef = vue_1.ref(false); // animation in progress
        const afNodeRef = vue_1.ref([]); // animation flattened nodes
        vue_1.watch(mergedExpandedKeysRef, (value, prevValue) => {
            const prevVSet = new Set(prevValue);
            let addedKey = null;
            let removedKey = null;
            for (const expandedKey of value) {
                if (!prevVSet.has(expandedKey)) {
                    if (addedKey !== null)
                        return; // multi expand, not triggered by click
                    addedKey = expandedKey;
                }
            }
            const currentVSet = new Set(value);
            for (const expandedKey of prevValue) {
                if (!currentVSet.has(expandedKey)) {
                    if (removedKey !== null)
                        return; // multi collapse, not triggered by click
                    removedKey = expandedKey;
                }
            }
            if ((addedKey !== null && removedKey !== null) ||
                (addedKey === null && removedKey === null)) {
                // 1. multi action, not triggered by click
                // 2. no action, don't know what happened
                return;
            }
            const { virtualScroll } = props;
            const viewportHeight = (virtualScroll ? virtualListInstRef.value.listElRef : selfElRef.value).offsetHeight;
            const viewportItemCount = Math.ceil(viewportHeight / ITEM_SIZE) + 1;
            if (addedKey !== null) {
                // play add animation
                aipRef.value = true;
                afNodeRef.value = treeMateRef.value.getFlattenedNodes(prevValue);
                const expandedNodeIndex = afNodeRef.value.findIndex((node) => node.key === addedKey);
                if (~expandedNodeIndex) {
                    const expandedChildren = treemate_1.flatten(
                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                    afNodeRef.value[expandedNodeIndex].children, value);
                    afNodeRef.value.splice(expandedNodeIndex + 1, 0, {
                        __motion: true,
                        mode: 'expand',
                        height: virtualScroll
                            ? expandedChildren.length * ITEM_SIZE
                            : undefined,
                        nodes: virtualScroll
                            ? expandedChildren.slice(0, viewportItemCount)
                            : expandedChildren
                    });
                }
            }
            if (removedKey !== null) {
                // play remove animation
                aipRef.value = true;
                afNodeRef.value = treeMateRef.value.getFlattenedNodes(value);
                const collapsedNodeIndex = afNodeRef.value.findIndex((node) => node.key === removedKey);
                if (~collapsedNodeIndex) {
                    const collapsedChildren = treemate_1.flatten(
                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                    afNodeRef.value[collapsedNodeIndex].children, value);
                    afNodeRef.value.splice(collapsedNodeIndex + 1, 0, {
                        __motion: true,
                        mode: 'collapse',
                        height: virtualScroll
                            ? collapsedChildren.length * ITEM_SIZE
                            : undefined,
                        nodes: virtualScroll
                            ? collapsedChildren.slice(0, viewportItemCount)
                            : collapsedChildren
                    });
                }
            }
        });
        const getFIndexRef = vue_1.computed(() => {
            return treemate_1.createIndexGetter(fNodesRef.value);
        });
        const mergedFNodesRef = vue_1.computed(() => {
            if (aipRef.value)
                return afNodeRef.value;
            else
                return fNodesRef.value;
        });
        function handleAfterEnter() {
            aipRef.value = false;
        }
        function doExpandedKeysChange(value) {
            const { 'onUpdate:expandedKeys': onUpdateExpandedKeys, onExpandedKeysChange } = props;
            uncontrolledExpandedKeysRef.value = value;
            if (onUpdateExpandedKeys)
                _utils_1.call(onUpdateExpandedKeys, value);
            if (onExpandedKeysChange)
                _utils_1.call(onExpandedKeysChange, value);
        }
        function doCheckedKeysChange(value) {
            const { 'onUpdate:checkedKeys': onUpdateCheckedKeys, onCheckedKeysChange } = props;
            uncontrolledCheckedKeysRef.value = value;
            if (onUpdateCheckedKeys)
                _utils_1.call(onUpdateCheckedKeys, value);
            if (onCheckedKeysChange)
                _utils_1.call(onCheckedKeysChange, value);
        }
        function doUpdateSelectedKeys(value) {
            const { 'onUpdate:selectedKeys': onUpdateSelectedKeys, onSelectedKeysChange } = props;
            uncontrolledSelectedKeysRef.value = value;
            if (onUpdateSelectedKeys)
                _utils_1.call(onUpdateSelectedKeys, value);
            if (onSelectedKeysChange)
                _utils_1.call(onSelectedKeysChange, value);
        }
        // Drag & Drop
        function doDragEnter(info) {
            const { onDragenter } = props;
            if (onDragenter)
                _utils_1.call(onDragenter, info);
        }
        function doDragLeave(info) {
            const { onDragleave } = props;
            if (onDragleave)
                _utils_1.call(onDragleave, info);
        }
        function doDragEnd(info) {
            const { onDragend } = props;
            if (onDragend)
                _utils_1.call(onDragend, info);
        }
        function doDragStart(info) {
            const { onDragstart } = props;
            if (onDragstart)
                _utils_1.call(onDragstart, info);
        }
        function doDragOver(info) {
            const { onDragover } = props;
            if (onDragover)
                _utils_1.call(onDragover, info);
        }
        function doDrop(info) {
            const { onDrop } = props;
            if (onDrop)
                _utils_1.call(onDrop, info);
        }
        function resetDndState() {
            resetDragState();
            resetDropState();
        }
        function resetDragState() {
            draggingNodeRef.value = null;
        }
        function resetDropState() {
            droppingOffsetLevelRef.value = 0;
            droppingNodeRef.value = null;
            droppingMouseNodeRef.value = null;
            droppingPositionRef.value = null;
            resetDragExpandState();
        }
        function resetDragExpandState() {
            if (expandTimerId) {
                window.clearTimeout(expandTimerId);
                expandTimerId = null;
            }
            nodeKeyToBeExpanded = null;
        }
        function handleCheck(node, checked) {
            if (props.disabled || node.disabled)
                return;
            const { checkedKeys } = treeMateRef.value[checked ? 'check' : 'uncheck'](node.key, displayedCheckedKeysRef.value, {
                cascade: props.cascade
            });
            doCheckedKeysChange(checkedKeys);
        }
        function toggleExpand(node) {
            if (props.disabled)
                return;
            const { value: mergedExpandedKeys } = mergedExpandedKeysRef;
            const index = mergedExpandedKeys.findIndex((expandNodeId) => expandNodeId === node.key);
            if (~index) {
                const expandedKeysAfterChange = Array.from(mergedExpandedKeys);
                expandedKeysAfterChange.splice(index, 1);
                doExpandedKeysChange(expandedKeysAfterChange);
            }
            else {
                doExpandedKeysChange(mergedExpandedKeys.concat(node.key));
            }
        }
        function handleSwitcherClick(node) {
            if (props.disabled || node.disabled || aipRef.value)
                return;
            toggleExpand(node);
        }
        function handleSelect(node) {
            if (props.disabled || node.disabled || !props.selectable)
                return;
            if (props.multiple) {
                const selectedKeys = mergedSelectedKeysRef.value;
                const index = selectedKeys.findIndex((key) => key === node.key);
                if (~index) {
                    if (props.cancelable) {
                        selectedKeys.splice(index, 1);
                    }
                }
                else if (!~index) {
                    selectedKeys.push(node.key);
                }
                doUpdateSelectedKeys(selectedKeys);
            }
            else {
                const selectedKeys = mergedSelectedKeysRef.value;
                if (selectedKeys.includes(node.key)) {
                    if (props.cancelable) {
                        doUpdateSelectedKeys([]);
                    }
                }
                else {
                    doUpdateSelectedKeys([node.key]);
                }
            }
        }
        function expandDragEnterNode(node) {
            if (expandTimerId) {
                window.clearTimeout(expandTimerId);
                expandTimerId = null;
            }
            nodeKeyToBeExpanded = node.key;
            const expand = () => {
                if (nodeKeyToBeExpanded !== node.key)
                    return;
                const { value: droppingMouseNode } = droppingMouseNodeRef;
                if (droppingMouseNode &&
                    droppingMouseNode.key === node.key &&
                    !mergedExpandedKeysRef.value.includes(node.key)) {
                    doExpandedKeysChange(mergedExpandedKeysRef.value.concat(node.key));
                }
                expandTimerId = null;
                nodeKeyToBeExpanded = null;
            };
            if (!node.shallowLoaded) {
                expandTimerId = window.setTimeout(() => {
                    const { onLoad } = props;
                    if (onLoad) {
                        if (!loadingKeysRef.value.includes(node.key)) {
                            loadingKeysRef.value.push(node.key);
                            onLoad(node.rawNode)
                                .then(() => {
                                loadingKeysRef.value.splice(loadingKeysRef.value.findIndex((key) => key === node.key), 1);
                                expand();
                            })
                                .catch((loadError) => {
                                console.error(loadError);
                                resetDragExpandState();
                            });
                        }
                    }
                    else if (process.env.NODE_ENV !== 'production') {
                        _utils_1.warn('tree', 'There is unloaded node in data but props.onLoad is not specified.');
                    }
                }, 1000);
            }
            else {
                expandTimerId = window.setTimeout(() => {
                    expand();
                }, 1000);
            }
        }
        // Dnd
        function handleDragEnter({ event, node }) {
            // node should be a tmNode
            if (!props.draggable || props.disabled || node.disabled)
                return;
            handleDragOver({ event, node }, false);
            doDragEnter({ event, node: node.rawNode });
        }
        function handleDragLeave({ event, node }) {
            if (!props.draggable || props.disabled || node.disabled)
                return;
            doDragLeave({ event, node: node.rawNode });
        }
        function handleDragLeaveTree(e) {
            if (e.target !== e.currentTarget)
                return;
            resetDropState();
        }
        // Dragend is ok, we don't need to add global listener to reset drag status
        function handleDragEnd({ event, node }) {
            resetDndState();
            if (!props.draggable || props.disabled || node.disabled)
                return;
            doDragEnd({ event, node: node.rawNode });
        }
        function handleDragStart({ event, node }) {
            var _a;
            if (!props.draggable || props.disabled || node.disabled)
                return;
            // Most of time, the image will block user's view
            utils_1.emptyImage && ((_a = event.dataTransfer) === null || _a === void 0 ? void 0 : _a.setDragImage(utils_1.emptyImage, 0, 0));
            dragStartX = event.clientX;
            draggingNodeRef.value = node;
            doDragStart({ event, node: node.rawNode });
        }
        function handleDragOver({ event, node }, emit = true) {
            var _a;
            if (!props.draggable || props.disabled || node.disabled)
                return;
            const { value: draggingNode } = draggingNodeRef;
            if (!draggingNode)
                return;
            const { allowDrop, indent } = props;
            if (emit)
                doDragOver({ event, node: node.rawNode });
            // Update dropping node
            const el = event.currentTarget;
            const { height: elOffsetHeight, top: elClientTop } = el.getBoundingClientRect();
            const eventOffsetY = event.clientY - elClientTop;
            let mousePosition;
            const allowDropInside = allowDrop({
                node: node.rawNode,
                dropPosition: 'inside',
                phase: 'drag'
            });
            if (allowDropInside) {
                if (eventOffsetY <= 8) {
                    mousePosition = 'before';
                }
                else if (eventOffsetY >= elOffsetHeight - 8) {
                    mousePosition = 'after';
                }
                else {
                    mousePosition = 'inside';
                }
            }
            else {
                if (eventOffsetY <= elOffsetHeight / 2) {
                    mousePosition = 'before';
                }
                else {
                    mousePosition = 'after';
                }
            }
            const { value: getFindex } = getFIndexRef;
            /** determine the drop position and drop node */
            /** the dropping node needn't to be the mouse hovering node! */
            /**
             * if there is something i've learned from implementing a complex
             * drag & drop. that is never write unit test before you really figure
             * out what behavior is exactly you want.
             */
            let finalDropNode;
            let finalDropPosition;
            const hoverNodeFIndex = getFindex(node.key);
            if (hoverNodeFIndex === null) {
                resetDropState();
                return;
            }
            let mouseAtExpandedNonLeafNode = false;
            if (mousePosition === 'inside') {
                finalDropNode = node;
                finalDropPosition = 'inside';
            }
            else {
                if (mousePosition === 'before') {
                    if (node.isFirstChild) {
                        finalDropNode = node;
                        finalDropPosition = 'before';
                    }
                    else {
                        finalDropNode = fNodesRef.value[hoverNodeFIndex - 1];
                        finalDropPosition = 'after';
                    }
                }
                else {
                    finalDropNode = node;
                    finalDropPosition = 'after';
                }
            }
            // If the node is non-leaf and it is expanded, we don't allow it to
            // drop after it and change it to drop before its next view sibling
            if (!finalDropNode.isLeaf &&
                mergedExpandedKeysRef.value.includes(finalDropNode.key)) {
                mouseAtExpandedNonLeafNode = true;
                if (finalDropPosition === 'after') {
                    finalDropNode = fNodesRef.value[hoverNodeFIndex + 1];
                    if (!finalDropNode) {
                        // maybe there is no next view sibling when non-leaf node has no
                        // children and it is the last node in the tree
                        finalDropNode = node;
                        finalDropPosition = 'inside';
                    }
                    else {
                        finalDropPosition = 'before';
                    }
                }
            }
            const droppingMouseNode = finalDropNode;
            droppingMouseNodeRef.value = droppingMouseNode;
            // This is a speacial case, user is dragging a last child itself, so we
            // only view it as they are trying to drop after it.
            // There are some relevant codes in bailout 1's child branch.
            // Also, the expand bailout should have a high priority. If it's non-leaf
            // node and expanded, keep its origin drop position
            if (!mouseAtExpandedNonLeafNode &&
                draggingNode.isLastChild &&
                draggingNode.key === finalDropNode.key) {
                finalDropPosition = 'after';
            }
            if (finalDropPosition === 'after') {
                let offset = dragStartX - event.clientX; // drag left => > 0
                let offsetLevel = 0;
                while (offset >= indent / 2 && // divide by 2 to make it easier to trigger
                    finalDropNode.parent !== null &&
                    finalDropNode.isLastChild &&
                    offsetLevel < 1) {
                    offset -= indent;
                    offsetLevel += 1;
                    finalDropNode = finalDropNode.parent;
                }
                droppingOffsetLevelRef.value = offsetLevel;
            }
            else {
                droppingOffsetLevelRef.value = 0;
            }
            // Bailout 1
            // Drag self into self
            // Drag it into direct parent
            if (draggingNode.contains(finalDropNode) ||
                (finalDropPosition === 'inside' &&
                    ((_a = draggingNode.parent) === null || _a === void 0 ? void 0 : _a.key) === finalDropNode.key)) {
                if (draggingNode.key === droppingMouseNode.key &&
                    draggingNode.key === finalDropNode.key) {
                    // This is special case that we want ui to show a mark to guide user
                    // to start dragging. Nor they will think nothing happens.
                    // However this is an invalid drop, we need to guard it inside
                    // handleDrop
                }
                else {
                    resetDropState();
                    return;
                }
            }
            // Bailout 3
            if (!allowDrop({
                node: finalDropNode.rawNode,
                dropPosition: finalDropPosition,
                phase: 'drag'
            })) {
                resetDropState();
                return;
            }
            if (draggingNode.key === finalDropNode.key) {
                // don't expand when drag on itself
                resetDragExpandState();
            }
            else {
                if (nodeKeyToBeExpanded !== finalDropNode.key) {
                    if (finalDropPosition === 'inside') {
                        if (props.expandOnDragenter) {
                            expandDragEnterNode(finalDropNode);
                            // Bailout 4
                            // not try to loading
                            if (!finalDropNode.shallowLoaded &&
                                nodeKeyToBeExpanded !== finalDropNode.key) {
                                resetDndState();
                                return;
                            }
                        }
                        else {
                            // Bailout 5
                            // never expands on drag
                            if (!finalDropNode.shallowLoaded) {
                                resetDndState();
                                return;
                            }
                        }
                    }
                    else {
                        resetDragExpandState();
                    }
                }
                else {
                    if (finalDropPosition !== 'inside') {
                        resetDragExpandState();
                    }
                }
            }
            droppingPositionRef.value = finalDropPosition;
            droppingNodeRef.value = finalDropNode;
        }
        function handleDrop({ event, node, dropPosition }) {
            if (!props.draggable || props.disabled || node.disabled) {
                return;
            }
            const { value: draggingNode } = draggingNodeRef;
            const { value: droppingNode } = droppingNodeRef;
            const { value: droppingPosition } = droppingPositionRef;
            if (!draggingNode || !droppingNode || !droppingPosition) {
                return;
            }
            // Bailout 1
            if (!props.allowDrop({
                node: droppingNode.rawNode,
                dropPosition: droppingPosition,
                phase: 'drag'
            })) {
                return;
            }
            // Bailout 2
            // This is a special case to guard since we want ui to show the status
            // but not to emit a event
            if (draggingNode.key === droppingNode.key) {
                return;
            }
            // Bailout 3
            // insert before its next node
            // insert after its prev node
            if (droppingPosition === 'before') {
                const nextNode = draggingNode.getNext({ includeDisabled: true });
                if (nextNode) {
                    if (nextNode.key === droppingNode.key) {
                        resetDropState();
                        return;
                    }
                }
            }
            if (droppingPosition === 'after') {
                const prevNode = draggingNode.getPrev({ includeDisabled: true });
                if (prevNode) {
                    if (prevNode.key === droppingNode.key) {
                        resetDropState();
                        return;
                    }
                }
            }
            doDrop({
                event,
                node: droppingNode.rawNode,
                dragNode: draggingNode.rawNode,
                dropPosition
            });
            resetDndState();
        }
        function handleScroll() {
            var _a;
            (_a = scrollbarInstRef.value) === null || _a === void 0 ? void 0 : _a.sync();
        }
        function handleResize() {
            var _a;
            (_a = scrollbarInstRef.value) === null || _a === void 0 ? void 0 : _a.sync();
        }
        vue_1.provide(interface_1.treeInjectionKey, {
            loadingKeysRef,
            highlightKeysRef,
            displayedCheckedKeysRef,
            displayedIndeterminateKeysRef,
            mergedSelectedKeysRef,
            mergedExpandedKeysRef,
            mergedThemeRef: themeRef,
            remoteRef: vue_1.toRef(props, 'remote'),
            onLoadRef: vue_1.toRef(props, 'onLoad'),
            draggableRef: vue_1.toRef(props, 'draggable'),
            checkableRef: vue_1.toRef(props, 'checkable'),
            blockLineRef: vue_1.toRef(props, 'blockLine'),
            indentRef: vue_1.toRef(props, 'indent'),
            droppingMouseNodeRef,
            droppingNodeParentRef,
            draggingNodeRef,
            droppingPositionRef,
            droppingOffsetLevelRef,
            fNodesRef,
            handleSwitcherClick,
            handleDragEnd,
            handleDragEnter,
            handleDragLeave,
            handleDragStart,
            handleDrop,
            handleDragOver,
            handleSelect,
            handleCheck
        });
        return {
            mergedClsPrefix: mergedClsPrefixRef,
            mergedTheme: themeRef,
            fNodes: mergedFNodesRef,
            aip: aipRef,
            selfElRef,
            virtualListInstRef,
            scrollbarInstRef,
            handleDragLeaveTree,
            handleScroll,
            getScrollContainer,
            getScrollContent,
            handleAfterEnter,
            handleResize,
            cssVars: vue_1.computed(() => {
                const { common: { cubicBezierEaseInOut }, self: { fontSize, nodeBorderRadius, nodeColorHover, nodeColorPressed, nodeColorActive, arrowColor, loadingColor, nodeTextColor, nodeTextColorDisabled, dropMarkColor } } = themeRef.value;
                return {
                    '--arrow-color': arrowColor,
                    '--loading-color': loadingColor,
                    '--bezier': cubicBezierEaseInOut,
                    '--font-size': fontSize,
                    '--node-border-radius': nodeBorderRadius,
                    '--node-color-active': nodeColorActive,
                    '--node-color-hover': nodeColorHover,
                    '--node-color-pressed': nodeColorPressed,
                    '--node-text-color': nodeTextColor,
                    '--node-text-color-disabled': nodeTextColorDisabled,
                    '--drop-mark-color': dropMarkColor
                };
            })
        };
    },
    render() {
        const { mergedClsPrefix, blockNode, blockLine, draggable } = this;
        const treeClass = [
            `${mergedClsPrefix}-tree`,
            (blockLine || blockNode) && `${mergedClsPrefix}-tree--block-node`,
            blockLine && `${mergedClsPrefix}-tree--block-line`
        ];
        const createNode = (tmNode) => '__motion' in tmNode ? (vue_1.h(MotionWrapper_1.default, { height: tmNode.height, nodes: tmNode.nodes, clsPrefix: mergedClsPrefix, mode: tmNode.mode, onAfterEnter: this.handleAfterEnter })) : (vue_1.h(TreeNode_1.default, { key: tmNode.key, tmNode: tmNode, clsPrefix: mergedClsPrefix }));
        if (this.virtualScroll) {
            const { mergedTheme } = this;
            return (vue_1.h(scrollbar_1.NScrollbar, { ref: "scrollbarInstRef", onDragleave: draggable ? this.handleDragLeaveTree : undefined, container: this.getScrollContainer, content: this.getScrollContent, class: treeClass, theme: mergedTheme.peers.Scrollbar, themeOverrides: mergedTheme.peerOverrides.Scrollbar }, {
                default: () => (vue_1.h(vueuc_1.VVirtualList, { ref: "virtualListInstRef", items: this.fNodes, itemSize: ITEM_SIZE, ignoreItemResize: this.aip, style: this.cssVars, onScroll: this.handleScroll, onResize: this.handleResize, showScrollbar: false, itemResizable: true }, {
                    default: ({ item }) => createNode(item)
                }))
            }));
        }
        return (vue_1.h("div", { class: treeClass, style: this.cssVars, onDragleave: draggable ? this.handleDragLeaveTree : undefined, ref: "selfElRef" }, this.fNodes.map(createNode)));
    }
});
