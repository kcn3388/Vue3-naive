"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const vue_1 = require("vue");
const lodash_1 = require("lodash");
const _mixins_1 = require("../../_mixins");
const _utils_1 = require("../../_utils");
/**
 * @deprecated
 */
const use_legacy_1 = require("../../config-consumer/src/use-legacy");
const styles_1 = require("../styles");
const elementProps = Object.assign(Object.assign({}, _mixins_1.useTheme.props), { tag: {
        type: String,
        default: 'div'
    }, 
    // deprecated
    onThemeChange: {
        type: Function,
        validator: () => {
            _utils_1.warn('element', '`on-theme-change` is deprecated.');
            return true;
        },
        default: undefined
    }, as: {
        type: String,
        validator: () => {
            _utils_1.warn('element', '`as` is deprecated, please use `tag` instead.');
            return true;
        },
        default: undefined
    } });
exports.default = vue_1.defineComponent({
    name: 'Element',
    alias: ['El'],
    props: elementProps,
    setup(props) {
        const { NConfigProvider, namespaceRef, mergedClsPrefixRef } = _mixins_1.useConfig(props);
        const themeRef = _mixins_1.useTheme('Element', 'Element', undefined, styles_1.elementLight, props, mergedClsPrefixRef);
        return Object.assign(Object.assign({}, use_legacy_1.default(NConfigProvider)), { mergedClsPrefix: mergedClsPrefixRef, namespace: namespaceRef, cssVars: vue_1.computed(() => {
                const { common } = themeRef.value;
                return Object.keys(common).reduce((prevValue, key) => {
                    prevValue[`--${lodash_1.kebabCase(key)}`] = common[key];
                    return prevValue;
                }, {});
            }) });
    },
    render() {
        var _a;
        const { as, tag, mergedClsPrefix, namespace, $slots, cssVars, 
        // deprecated
        legacyTheme, legacyThemeEnvironment, legacyStyleScheme } = this;
        return vue_1.h(as || tag, {
            class: [
                `${mergedClsPrefix}-element`,
                legacyTheme && `${mergedClsPrefix}-${legacyTheme}-theme`
            ],
            style: cssVars
        }, (((_a = $slots.default) === null || _a === void 0 ? void 0 : _a.call($slots, {
            namespace: namespace,
            theme: legacyTheme,
            themeEnvironment: legacyThemeEnvironment,
            styleScheme: legacyStyleScheme
        })) || null));
    }
});
