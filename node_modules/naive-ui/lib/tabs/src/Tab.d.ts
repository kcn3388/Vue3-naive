declare const _default: import("vue").DefineComponent<{
    leftPadded: BooleanConstructor;
    addable: BooleanConstructor;
} & {
    readonly label: {
        readonly type: import("vue").PropType<string | number | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }> | (() => import("vue").VNodeChild)>;
        readonly default: undefined;
        readonly validator: () => boolean;
    };
    readonly tab: import("vue").PropType<string | number | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }> | (() => import("vue").VNodeChild)>;
    readonly name: {
        readonly type: import("vue").PropType<string | number>;
        readonly required: true;
    };
    readonly disabled: BooleanConstructor;
    readonly displayDirective: {
        readonly type: import("vue").PropType<"show" | "if">;
        readonly default: "if";
    };
    readonly closable: {
        readonly type: import("vue").PropType<boolean | undefined>;
        readonly default: undefined;
    };
}, {
    mergedClosable: import("vue").ComputedRef<boolean>;
    style: import("vue").Ref<string | import("vue").CSSProperties | undefined>;
    clsPrefix: import("vue").Ref<string>;
    value: import("vue").Ref<string | number | null>;
    type: import("vue").Ref<"bar" | "line" | "card">;
    handleClose(e: MouseEvent): void;
    handleClick(): void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    label: string | number | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }> | (() => import("vue").VNodeChild);
    name: string | number;
    disabled: boolean;
    displayDirective: "show" | "if";
    closable: boolean | undefined;
    addable: boolean;
    leftPadded: boolean;
} & {
    tab?: string | number | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }> | (() => import("vue").VNodeChild) | undefined;
}>, {
    label: string | number | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }> | (() => import("vue").VNodeChild);
    disabled: boolean;
    displayDirective: "show" | "if";
    closable: boolean | undefined;
    addable: boolean;
    leftPadded: boolean;
}>;
export default _default;
