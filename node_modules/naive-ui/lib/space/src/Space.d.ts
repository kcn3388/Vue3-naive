import { PropType, CSSProperties } from 'vue';
import type { ExtractPublicPropTypes } from '../../_utils';
declare type Align = 'stretch' | 'baseline' | 'start' | 'end' | 'center' | 'flex-end' | 'flex-start';
declare const spaceProps: {
    readonly align: {
        readonly type: PropType<Align>;
        readonly default: undefined;
    };
    readonly justify: {
        readonly type: PropType<"start" | "end">;
        readonly default: "start";
    };
    readonly inline: {
        readonly type: BooleanConstructor;
        readonly default: false;
    };
    readonly vertical: {
        readonly type: BooleanConstructor;
        readonly default: false;
    };
    readonly size: {
        readonly type: PropType<number | [number, number] | "small" | "medium" | "large">;
        readonly default: "medium";
    };
    readonly itemStyle: PropType<string | CSSProperties>;
    readonly wrap: {
        readonly type: BooleanConstructor;
        readonly default: true;
    };
    readonly theme: PropType<import("../../_mixins").Theme<"Space", {
        gapSmall: string;
        gapMedium: string;
        gapLarge: string;
    }, any>>;
    readonly themeOverrides: PropType<import("../../_mixins/use-theme").ExtractThemeOverrides<import("../../_mixins").Theme<"Space", {
        gapSmall: string;
        gapMedium: string;
        gapLarge: string;
    }, any>>>;
    readonly builtinThemeOverrides: PropType<import("../../_mixins/use-theme").ExtractThemeOverrides<import("../../_mixins").Theme<"Space", {
        gapSmall: string;
        gapMedium: string;
        gapLarge: string;
    }, any>>>;
};
export declare type SpaceProps = ExtractPublicPropTypes<typeof spaceProps>;
declare const _default: import("vue").DefineComponent<{
    readonly align: {
        readonly type: PropType<Align>;
        readonly default: undefined;
    };
    readonly justify: {
        readonly type: PropType<"start" | "end">;
        readonly default: "start";
    };
    readonly inline: {
        readonly type: BooleanConstructor;
        readonly default: false;
    };
    readonly vertical: {
        readonly type: BooleanConstructor;
        readonly default: false;
    };
    readonly size: {
        readonly type: PropType<number | [number, number] | "small" | "medium" | "large">;
        readonly default: "medium";
    };
    readonly itemStyle: PropType<string | CSSProperties>;
    readonly wrap: {
        readonly type: BooleanConstructor;
        readonly default: true;
    };
    readonly theme: PropType<import("../../_mixins").Theme<"Space", {
        gapSmall: string;
        gapMedium: string;
        gapLarge: string;
    }, any>>;
    readonly themeOverrides: PropType<import("../../_mixins/use-theme").ExtractThemeOverrides<import("../../_mixins").Theme<"Space", {
        gapSmall: string;
        gapMedium: string;
        gapLarge: string;
    }, any>>>;
    readonly builtinThemeOverrides: PropType<import("../../_mixins/use-theme").ExtractThemeOverrides<import("../../_mixins").Theme<"Space", {
        gapSmall: string;
        gapMedium: string;
        gapLarge: string;
    }, any>>>;
}, {
    mergedClsPrefix: import("vue").ComputedRef<string>;
    margin: import("vue").ComputedRef<{
        horizontal: number;
        vertical: number;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    inline: boolean;
    size: number | [number, number] | "small" | "medium" | "large";
    wrap: boolean;
    vertical: boolean;
    justify: "start" | "end";
    align: Align;
} & {
    theme?: import("../../_mixins").Theme<"Space", {
        gapSmall: string;
        gapMedium: string;
        gapLarge: string;
    }, any> | undefined;
    themeOverrides?: import("../../_mixins/use-theme").ExtractThemeOverrides<import("../../_mixins").Theme<"Space", {
        gapSmall: string;
        gapMedium: string;
        gapLarge: string;
    }, any>> | undefined;
    builtinThemeOverrides?: import("../../_mixins/use-theme").ExtractThemeOverrides<import("../../_mixins").Theme<"Space", {
        gapSmall: string;
        gapMedium: string;
        gapLarge: string;
    }, any>> | undefined;
    itemStyle?: string | CSSProperties | undefined;
}>, {
    inline: boolean;
    size: number | [number, number] | "small" | "medium" | "large";
    wrap: boolean;
    vertical: boolean;
    justify: "start" | "end";
    align: Align;
}>;
export default _default;
