"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const vue_1 = require("vue");
const popover_1 = require("../../popover");
const Popover_1 = require("../../popover/src/Popover");
const PopselectPanel_1 = require("./PopselectPanel");
const _utils_1 = require("../../_utils");
const _mixins_1 = require("../../_mixins");
const styles_1 = require("../styles");
const interface_1 = require("./interface");
const popselectProps = Object.assign(Object.assign(Object.assign(Object.assign({}, _mixins_1.useTheme.props), Popover_1.popoverBaseProps), { 
    // eslint-disable-next-line vue/require-prop-types
    trigger: {
        type: String,
        default: 'hover'
    }, 
    // eslint-disable-next-line vue/require-prop-types
    showArrow: {
        type: Boolean,
        default: false
    } }), PopselectPanel_1.panelProps);
exports.default = vue_1.defineComponent({
    name: 'Popselect',
    props: popselectProps,
    setup(props) {
        const themeRef = _mixins_1.useTheme('Popselect', 'Popselect', undefined, styles_1.popselectLight, props);
        const popoverInstRef = vue_1.ref(null);
        function syncPosition() {
            var _a;
            (_a = popoverInstRef.value) === null || _a === void 0 ? void 0 : _a.syncPosition();
        }
        function setShow(value) {
            var _a;
            (_a = popoverInstRef.value) === null || _a === void 0 ? void 0 : _a.setShow(value);
        }
        vue_1.provide(interface_1.popselectInjectionKey, {
            mergedThemeRef: themeRef,
            syncPosition,
            setShow
        });
        return {
            popoverInstRef,
            mergedTheme: themeRef
        };
    },
    render() {
        const { mergedTheme } = this;
        return vue_1.h(popover_1.NPopover, _utils_1.omit(this.$props, PopselectPanel_1.panelPropKeys, {
            padded: false,
            ref: 'popoverInstRef',
            internalExtraClass: 'popselect',
            theme: mergedTheme.peers.Popover,
            themeOverrides: mergedTheme.peerOverrides.Popover
        }), {
            trigger: this.$slots.default,
            default: () => {
                return vue_1.h(PopselectPanel_1.default, _utils_1.keep(this.$props, PopselectPanel_1.panelPropKeys));
            }
        });
    }
});
